/*
 * This file is generated by jOOQ.
 */
package ingsw_proj_magazzino.db.generated.tables;


import ingsw_proj_magazzino.db.generated.DefaultSchema;
import ingsw_proj_magazzino.db.generated.Keys;
import ingsw_proj_magazzino.db.generated.tables.records.OrdineRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Ordine extends TableImpl<OrdineRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Ordine</code>
     */
    public static final Ordine ORDINE = new Ordine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdineRecord> getRecordType() {
        return OrdineRecord.class;
    }

    /**
     * The column <code>Ordine.id</code>.
     */
    public final TableField<OrdineRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Ordine.tipo</code>.
     */
    public final TableField<OrdineRecord, String> TIPO = createField(DSL.name("tipo"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Ordine.stato</code>.
     */
    public final TableField<OrdineRecord, String> STATO = createField(DSL.name("stato"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>Ordine.dataEm</code>.
     */
    public final TableField<OrdineRecord, String> DATAEM = createField(DSL.name("dataEm"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("'1970-01-01'"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>Ordine.dataCo</code>.
     */
    public final TableField<OrdineRecord, String> DATACO = createField(DSL.name("dataCo"), SQLDataType.CLOB, this, "");

    private Ordine(Name alias, Table<OrdineRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ordine(Name alias, Table<OrdineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Ordine</code> table reference
     */
    public Ordine(String alias) {
        this(DSL.name(alias), ORDINE);
    }

    /**
     * Create an aliased <code>Ordine</code> table reference
     */
    public Ordine(Name alias) {
        this(alias, ORDINE);
    }

    /**
     * Create a <code>Ordine</code> table reference
     */
    public Ordine() {
        this(DSL.name("Ordine"), null);
    }

    public <O extends Record> Ordine(Table<O> child, ForeignKey<O, OrdineRecord> key) {
        super(child, key, ORDINE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OrdineRecord> getPrimaryKey() {
        return Keys.ORDINE__PK_ORDINE;
    }

    @Override
    public List<Check<OrdineRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name(""), "(dataCo is null or dataCo like '____-__-__')", true)
        );
    }

    @Override
    public Ordine as(String alias) {
        return new Ordine(DSL.name(alias), this);
    }

    @Override
    public Ordine as(Name alias) {
        return new Ordine(alias, this);
    }

    @Override
    public Ordine as(Table<?> alias) {
        return new Ordine(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ordine rename(String name) {
        return new Ordine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ordine rename(Name name) {
        return new Ordine(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ordine rename(Table<?> name) {
        return new Ordine(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
