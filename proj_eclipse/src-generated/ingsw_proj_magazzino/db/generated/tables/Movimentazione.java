/*
 * This file is generated by jOOQ.
 */
package ingsw_proj_magazzino.db.generated.tables;


import ingsw_proj_magazzino.db.generated.DefaultSchema;
import ingsw_proj_magazzino.db.generated.Keys;
import ingsw_proj_magazzino.db.generated.tables.records.MovimentazioneRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Movimentazione extends TableImpl<MovimentazioneRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Movimentazione</code>
     */
    public static final Movimentazione MOVIMENTAZIONE = new Movimentazione();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovimentazioneRecord> getRecordType() {
        return MovimentazioneRecord.class;
    }

    /**
     * The column <code>Movimentazione.ordine</code>.
     */
    public final TableField<MovimentazioneRecord, Integer> ORDINE = createField(DSL.name("ordine"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Movimentazione.prod</code>.
     */
    public final TableField<MovimentazioneRecord, Integer> PROD = createField(DSL.name("prod"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Movimentazione.box</code>.
     */
    public final TableField<MovimentazioneRecord, String> BOX = createField(DSL.name("box"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Movimentazione.qta</code>.
     */
    public final TableField<MovimentazioneRecord, Integer> QTA = createField(DSL.name("qta"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Movimentazione.stato</code>.
     */
    public final TableField<MovimentazioneRecord, String> STATO = createField(DSL.name("stato"), SQLDataType.CLOB.nullable(false).defaultValue(DSL.field(DSL.raw("NON_ASSEGNATA"), SQLDataType.CLOB)), this, "");

    /**
     * The column <code>Movimentazione.magazziniere</code>.
     */
    public final TableField<MovimentazioneRecord, String> MAGAZZINIERE = createField(DSL.name("magazziniere"), SQLDataType.CLOB, this, "");

    private Movimentazione(Name alias, Table<MovimentazioneRecord> aliased) {
        this(alias, aliased, null);
    }

    private Movimentazione(Name alias, Table<MovimentazioneRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Movimentazione</code> table reference
     */
    public Movimentazione(String alias) {
        this(DSL.name(alias), MOVIMENTAZIONE);
    }

    /**
     * Create an aliased <code>Movimentazione</code> table reference
     */
    public Movimentazione(Name alias) {
        this(alias, MOVIMENTAZIONE);
    }

    /**
     * Create a <code>Movimentazione</code> table reference
     */
    public Movimentazione() {
        this(DSL.name("Movimentazione"), null);
    }

    public <O extends Record> Movimentazione(Table<O> child, ForeignKey<O, MovimentazioneRecord> key) {
        super(child, key, MOVIMENTAZIONE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<MovimentazioneRecord> getPrimaryKey() {
        return Keys.MOVIMENTAZIONE__PK_MOVIMENTAZIONE;
    }

    @Override
    public List<ForeignKey<MovimentazioneRecord, ?>> getReferences() {
        return Arrays.asList(Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_ORDINE, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_PRODOTTO, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_BOX, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_UTENTE);
    }

    private transient Ordine _ordine;
    private transient Prodotto _prodotto;
    private transient Box _box;
    private transient Utente _utente;

    /**
     * Get the implicit join path to the <code>Ordine</code> table.
     */
    public Ordine ordine() {
        if (_ordine == null)
            _ordine = new Ordine(this, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_ORDINE);

        return _ordine;
    }

    /**
     * Get the implicit join path to the <code>Prodotto</code> table.
     */
    public Prodotto prodotto() {
        if (_prodotto == null)
            _prodotto = new Prodotto(this, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_PRODOTTO);

        return _prodotto;
    }

    /**
     * Get the implicit join path to the <code>Box</code> table.
     */
    public Box box() {
        if (_box == null)
            _box = new Box(this, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_BOX);

        return _box;
    }

    /**
     * Get the implicit join path to the <code>Utente</code> table.
     */
    public Utente utente() {
        if (_utente == null)
            _utente = new Utente(this, Keys.MOVIMENTAZIONE__FK_MOVIMENTAZIONE_PK_UTENTE);

        return _utente;
    }

    @Override
    public Movimentazione as(String alias) {
        return new Movimentazione(DSL.name(alias), this);
    }

    @Override
    public Movimentazione as(Name alias) {
        return new Movimentazione(alias, this);
    }

    @Override
    public Movimentazione as(Table<?> alias) {
        return new Movimentazione(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Movimentazione rename(String name) {
        return new Movimentazione(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movimentazione rename(Name name) {
        return new Movimentazione(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Movimentazione rename(Table<?> name) {
        return new Movimentazione(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, Integer, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
