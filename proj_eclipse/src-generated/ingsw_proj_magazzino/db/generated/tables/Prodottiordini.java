/*
 * This file is generated by jOOQ.
 */
package ingsw_proj_magazzino.db.generated.tables;


import ingsw_proj_magazzino.db.generated.DefaultSchema;
import ingsw_proj_magazzino.db.generated.Keys;
import ingsw_proj_magazzino.db.generated.tables.records.ProdottiordiniRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Prodottiordini extends TableImpl<ProdottiordiniRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ProdottiOrdini</code>
     */
    public static final Prodottiordini PRODOTTIORDINI = new Prodottiordini();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProdottiordiniRecord> getRecordType() {
        return ProdottiordiniRecord.class;
    }

    /**
     * The column <code>ProdottiOrdini.prod</code>.
     */
    public final TableField<ProdottiordiniRecord, Integer> PROD = createField(DSL.name("prod"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ProdottiOrdini.ordine</code>.
     */
    public final TableField<ProdottiordiniRecord, Integer> ORDINE = createField(DSL.name("ordine"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ProdottiOrdini.qta</code>.
     */
    public final TableField<ProdottiordiniRecord, Integer> QTA = createField(DSL.name("qta"), SQLDataType.INTEGER.nullable(false), this, "");

    private Prodottiordini(Name alias, Table<ProdottiordiniRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prodottiordini(Name alias, Table<ProdottiordiniRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ProdottiOrdini</code> table reference
     */
    public Prodottiordini(String alias) {
        this(DSL.name(alias), PRODOTTIORDINI);
    }

    /**
     * Create an aliased <code>ProdottiOrdini</code> table reference
     */
    public Prodottiordini(Name alias) {
        this(alias, PRODOTTIORDINI);
    }

    /**
     * Create a <code>ProdottiOrdini</code> table reference
     */
    public Prodottiordini() {
        this(DSL.name("ProdottiOrdini"), null);
    }

    public <O extends Record> Prodottiordini(Table<O> child, ForeignKey<O, ProdottiordiniRecord> key) {
        super(child, key, PRODOTTIORDINI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProdottiordiniRecord> getPrimaryKey() {
        return Keys.PRODOTTIORDINI__PK_PRODOTTIORDINI;
    }

    @Override
    public List<ForeignKey<ProdottiordiniRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PRODOTTIORDINI__FK_PRODOTTIORDINI_PK_PRODOTTO, Keys.PRODOTTIORDINI__FK_PRODOTTIORDINI_PK_ORDINE);
    }

    private transient Prodotto _prodotto;
    private transient Ordine _ordine;

    /**
     * Get the implicit join path to the <code>Prodotto</code> table.
     */
    public Prodotto prodotto() {
        if (_prodotto == null)
            _prodotto = new Prodotto(this, Keys.PRODOTTIORDINI__FK_PRODOTTIORDINI_PK_PRODOTTO);

        return _prodotto;
    }

    /**
     * Get the implicit join path to the <code>Ordine</code> table.
     */
    public Ordine ordine() {
        if (_ordine == null)
            _ordine = new Ordine(this, Keys.PRODOTTIORDINI__FK_PRODOTTIORDINI_PK_ORDINE);

        return _ordine;
    }

    @Override
    public Prodottiordini as(String alias) {
        return new Prodottiordini(DSL.name(alias), this);
    }

    @Override
    public Prodottiordini as(Name alias) {
        return new Prodottiordini(alias, this);
    }

    @Override
    public Prodottiordini as(Table<?> alias) {
        return new Prodottiordini(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodottiordini rename(String name) {
        return new Prodottiordini(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodottiordini rename(Name name) {
        return new Prodottiordini(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodottiordini rename(Table<?> name) {
        return new Prodottiordini(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
