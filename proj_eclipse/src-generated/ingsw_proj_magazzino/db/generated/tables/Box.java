/*
 * This file is generated by jOOQ.
 */
package ingsw_proj_magazzino.db.generated.tables;


import ingsw_proj_magazzino.db.generated.DefaultSchema;
import ingsw_proj_magazzino.db.generated.Keys;
import ingsw_proj_magazzino.db.generated.tables.records.BoxRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Box extends TableImpl<BoxRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Box</code>
     */
    public static final Box BOX = new Box();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BoxRecord> getRecordType() {
        return BoxRecord.class;
    }

    /**
     * The column <code>Box.id</code>.
     */
    public final TableField<BoxRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>Box.prodotto</code>.
     */
    public final TableField<BoxRecord, Integer> PRODOTTO = createField(DSL.name("prodotto"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Box.qta</code>.
     */
    public final TableField<BoxRecord, Integer> QTA = createField(DSL.name("qta"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Box(Name alias, Table<BoxRecord> aliased) {
        this(alias, aliased, null);
    }

    private Box(Name alias, Table<BoxRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Box</code> table reference
     */
    public Box(String alias) {
        this(DSL.name(alias), BOX);
    }

    /**
     * Create an aliased <code>Box</code> table reference
     */
    public Box(Name alias) {
        this(alias, BOX);
    }

    /**
     * Create a <code>Box</code> table reference
     */
    public Box() {
        this(DSL.name("Box"), null);
    }

    public <O extends Record> Box(Table<O> child, ForeignKey<O, BoxRecord> key) {
        super(child, key, BOX);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BoxRecord> getPrimaryKey() {
        return Keys.BOX__PK_BOX;
    }

    @Override
    public List<ForeignKey<BoxRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BOX__FK_BOX_PK_PRODOTTO);
    }

    private transient Prodotto _prodotto;

    /**
     * Get the implicit join path to the <code>Prodotto</code> table.
     */
    public Prodotto prodotto() {
        if (_prodotto == null)
            _prodotto = new Prodotto(this, Keys.BOX__FK_BOX_PK_PRODOTTO);

        return _prodotto;
    }

    @Override
    public Box as(String alias) {
        return new Box(DSL.name(alias), this);
    }

    @Override
    public Box as(Name alias) {
        return new Box(alias, this);
    }

    @Override
    public Box as(Table<?> alias) {
        return new Box(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Box rename(String name) {
        return new Box(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Box rename(Name name) {
        return new Box(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Box rename(Table<?> name) {
        return new Box(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
