/*
 * This file is generated by jOOQ.
 */
package ingsw_proj_magazzino.db.generated.tables;


import ingsw_proj_magazzino.db.generated.DefaultSchema;
import ingsw_proj_magazzino.db.generated.Keys;
import ingsw_proj_magazzino.db.generated.tables.records.ProdottoRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Prodotto extends TableImpl<ProdottoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Prodotto</code>
     */
    public static final Prodotto PRODOTTO = new Prodotto();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProdottoRecord> getRecordType() {
        return ProdottoRecord.class;
    }

    /**
     * The column <code>Prodotto.id</code>.
     */
    public final TableField<ProdottoRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Prodotto.nome</code>.
     */
    public final TableField<ProdottoRecord, String> NOME = createField(DSL.name("nome"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>Prodotto.descrizione</code>.
     */
    public final TableField<ProdottoRecord, String> DESCRIZIONE = createField(DSL.name("descrizione"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Prodotto.peso</code>.
     */
    public final TableField<ProdottoRecord, Float> PESO = createField(DSL.name("peso"), SQLDataType.REAL, this, "");

    /**
     * The column <code>Prodotto.soglia</code>.
     */
    public final TableField<ProdottoRecord, Integer> SOGLIA = createField(DSL.name("soglia"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private Prodotto(Name alias, Table<ProdottoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Prodotto(Name alias, Table<ProdottoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Prodotto</code> table reference
     */
    public Prodotto(String alias) {
        this(DSL.name(alias), PRODOTTO);
    }

    /**
     * Create an aliased <code>Prodotto</code> table reference
     */
    public Prodotto(Name alias) {
        this(alias, PRODOTTO);
    }

    /**
     * Create a <code>Prodotto</code> table reference
     */
    public Prodotto() {
        this(DSL.name("Prodotto"), null);
    }

    public <O extends Record> Prodotto(Table<O> child, ForeignKey<O, ProdottoRecord> key) {
        super(child, key, PRODOTTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProdottoRecord> getPrimaryKey() {
        return Keys.PRODOTTO__PK_PRODOTTO;
    }

    @Override
    public Prodotto as(String alias) {
        return new Prodotto(DSL.name(alias), this);
    }

    @Override
    public Prodotto as(Name alias) {
        return new Prodotto(alias, this);
    }

    @Override
    public Prodotto as(Table<?> alias) {
        return new Prodotto(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodotto rename(String name) {
        return new Prodotto(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodotto rename(Name name) {
        return new Prodotto(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Prodotto rename(Table<?> name) {
        return new Prodotto(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, Float, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super Float, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super Float, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
